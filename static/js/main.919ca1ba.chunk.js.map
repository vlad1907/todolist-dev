{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/hooks.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","useAppDispatch","useDispatch","useAppSelector","useSelector","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","id","delete","put","todolistID","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","Error","apiModel","deadline","description","priority","startDate","then","res","resultCode","updateTaskAC","catch","AddItemForm","React","memo","addItem","disabled","console","log","useState","newTaskTitle","setNewTaskTitle","setError","addTask","trim","TextField","label","variant","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","props","setTitle","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onRemoveHandler","useCallback","removeTask","onChangeStatusHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onChangeTitleHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useEffect","todolist","setTasksAC","items","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodolistTitle","newTitle","tasksForTodolist","filter","removeTodolist","entityStatus","map","Button","TodolistsList","todolists","state","auth","action","removeTaskAC","removeTaskTC","thunk","item","addTaskTC","changeStatus","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","addTodolist","addTodolistTC","Grid","container","style","padding","justifyContent","spacing","tl","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","App","classes","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","marginTop","CircularProgress","rootReducer","combineReducers","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.919ca1ba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b6ec5262-3a7f-4613-ab32-e5f165a7a372',\r\n    },\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistID: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistID}/tasks`)\r\n    },\r\n    createTask(todolistID: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<UpdateTaskType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistID: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', {data})\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    id: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { AppRootStateType, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector","import {AppActionsType, setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<AppActionsType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<AppActionsType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {AppThunk} from '../../app/store';\r\nimport {setAppStatusAC} from '../../app/app-reducer';\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: LoginStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionsType): LoginStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data).then(res=>{\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const logoutTC = (): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout().then(res=>{\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n// types\r\n\r\ntype LoginStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n","import {AppThunk} from './store';\r\nimport {authAPI} from '../api/todolists-api';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\nexport const initializedAppTC = (): AppThunk => (dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n\r\n        }\r\n\r\n        dispatch(setAppInitializedAC(true))\r\n    })\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type AppActionsType =\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppInitializedAC>","import {todolistAPI, TodolistType} from \"../../../api/todolists-api\";\r\nimport {AppThunk} from '../../../app/store';\r\nimport {RequestStatusType, setAppStatusAC} from '../../../app/app-reducer';\r\nimport {handleServerNetworkError} from '../../../utils/error-utils';\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', title, id} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', filter, id} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', status, id} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodolists().then((res) => {\r\n        dispatch(setTodolistsAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodolist(todolistId).then(() => {\r\n        dispatch(removeTodolistAC(todolistId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title).then((res) => {\r\n        dispatch(addTodolistAC(res.data.data.item))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string): AppThunk => (dispatch) => {\r\n    todolistAPI.updateTodolistTitle(id, title).then(() => {\r\n        dispatch(changeTodolistTitleAC(id, title))\r\n    })\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport  type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistsAC>\r\n\r\n\r\n\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistActionType} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskType} from \"../../../api/todolists-api\";\r\nimport {AppRootStateType, AppThunk} from '../../../app/store';\r\nimport {setAppStatusAC} from '../../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'SET-TASK':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todolistId} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'SET-TASK', todolistId, tasks} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId).then((res) => {\r\n        dispatch(setTasksAC(todolistId, res.data.items))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\nexport const removeTaskTC = (todolistId: string, id: string): AppThunk => (dispatch) => {\r\n    todolistAPI.deleteTask(todolistId, id).then(() => {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string): AppThunk =>\r\n    (dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            throw new Error(\"task not found in the state\")\r\n        }\r\n        const apiModel: UpdateTaskType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel).then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistActionType\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {ControlPoint} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    console.log(\"Additem is called\")\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\");\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n            setNewTaskTitle(\"\");\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() === \"\") {\r\n            setError(\"Title is required\")\r\n            return;\r\n        }\r\n        addItem(newTaskTitle.trim());\r\n        setNewTaskTitle(\"\");\r\n    }\r\n\r\n\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            label={'Type value'}\r\n            variant={'outlined'}\r\n            value={newTaskTitle}\r\n            onChange={onNewTitleChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            helperText={error}\r\n        />\r\n        <IconButton onClick={addTask} color={'primary'}disabled={disabled}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log(\"EditableSpan\")\r\n    let [title, setTitle] = useState(\"\")\r\n    let [editMode, setEditMode] = useState(false)\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        return setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode ? <TextField onBlur={activateViewMode} onChange={onChangeTitleHandler} value={title} autoFocus/> :\r\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistID: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onRemoveHandler = useCallback(() => props.removeTask(props.task.id, props.todolistID), [props.task.id, props.todolistID])\r\n\r\n    const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistID)\r\n    }, [props.task.id, props.todolistID]);\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistID);\r\n    }, [props.task.id, props.todolistID])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            onChange={onChangeStatusHandler}\r\n            checked={props.task.status === TaskStatuses.Completed}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"./todolists-reducer\";\r\nimport {useAppDispatch} from '../../../app/hooks';\r\nimport {fetchTasksTC} from './tasks-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, newTitle)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.todolist.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                        todolistID={props.todolist.id}\r\n                        task={t}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        key={t.id}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todolist.filter === 'all' ? \"contained\" : \"text\"} onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={'primary'} variant={props.todolist.filter === 'active' ? \"contained\" : \"text\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={props.todolist.filter === 'completed' ? \"contained\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './Todolist/todolists-reducer';\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './Todolist/tasks-reducer';\r\nimport {TaskStatuses} from '../../api/todolists-api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useAppSelector<Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useAppSelector<TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskTC(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const thunk = addTaskTC(title, todolistId);\r\n        dispatch(thunk);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title: newTitle}, todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string,) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, newTitle));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}} justifyContent={\"center\"}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3} justifyContent={\"center\"}>\r\n            {\r\n                todolists.map((tl) => {\r\n                    let tasksForTodolist = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist todolist={tl}\r\n                                      removeTodolist={removeTodolist}\r\n                                      key={tl.id}\r\n                                      tasks={tasksForTodolist}\r\n                                      removeTask={removeTask}\r\n                                      changeFilter={changeFilter}\r\n                                      addTask={addTask}\r\n                                      changeTaskStatus={changeStatus}\r\n                                      changeTaskTitle={changeTaskTitle}\r\n                                      changeTodolistTitle={changeTodolistTitle}\r\n                                      demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert'\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n    // const [open, setOpen] = useState(true)\r\n\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n        // setOpen(false)\r\n\r\n    }\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error} 😠\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {loginTC} from './auth-reducer';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            } else if (values.password.length <= 2) {\r\n                return {password: 'Password length should be 2 or more'}\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    createStyles,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Theme,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {useAppDispatch, useAppSelector} from './hooks';\r\nimport {BrowserRouter, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {initializedAppTC} from './app-reducer';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch()\r\n    const status = useAppSelector(state => state.app.status)\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n    \r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{textAlign: \"center\", marginTop: \"20%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className={classes.menuButton}>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Todolists\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path=\"/login\" element={<Login/>}/>\r\n                        <Route path=\"*\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import {AnyAction, applyMiddleware, combineReducers, legacy_createStore as createStore} from 'redux';\r\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer';\r\nimport {tasksReducer} from '../features/TodolistsList/Todolist/tasks-reducer';\r\nimport thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatch = ThunkDispatch<AppRootStateType,\r\n    unknown,\r\n    AnyAction>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AnyAction>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}