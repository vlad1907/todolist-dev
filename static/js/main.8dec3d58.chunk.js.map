{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/hooks.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","useAppDispatch","useDispatch","useAppSelector","useSelector","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","id","delete","put","todolistID","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializedAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","updateTaskTC","getState","task","find","t","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","console","log","useState","newTaskTitle","setNewTaskTitle","setError","addTask","trim","TextField","label","variant","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","props","setTitle","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onRemoveHandler","useCallback","removeTask","onChangeStatusHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onChangeTitleHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useEffect","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodolistTitle","newTitle","tasksForTodolist","removeTodolist","Button","TodolistsList","auth","thunk","changeStatus","addTodolist","Grid","container","style","padding","justifyContent","spacing","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","setFieldError","field","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","App","classes","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","marginTop","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8dec3d58.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'f6e09271-9951-4ca7-8fbf-c73bc4098a4f',\r\n    },\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistID: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistID}/tasks`)\r\n    },\r\n    createTask(todolistID: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<UpdateTaskType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistID: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type FieldsErrorsType = { field: string, error: string }\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    fieldsErrors?: Array<FieldsErrorsType>\r\n    messages: string[]\r\n    data: D\r\n\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    id: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { AppRootStateType, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}","import {AppThunk} from '../../app/store';\r\nimport {setAppStatusAC} from '../../app/app-reducer';\r\nimport {authAPI, FieldsErrorsType, LoginParamsType} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: string[], fieldsErrors?: FieldsErrorsType[] }\r\n}>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await authAPI.login(param)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            }\r\n        )\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            }\r\n        )\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {authAPI} from '../api/todolists-api';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport const initializedAppTC = createAsyncThunk('app/initializedApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: ' app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializedAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import {todolistAPI, TodolistType} from \"../../../api/todolists-api\";\r\nimport {AppThunk} from '../../../app/store';\r\nimport {RequestStatusType, setAppStatusAC} from '../../../app/app-reducer';\r\nimport {handleServerNetworkError} from '../../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistAPI.getTodolists()\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistAPI.createTodolist(title)\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolist: res.data.data.item}\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param:{id: string, title: string}, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    await todolistAPI.updateTodolistTitle(param.id, param.title)\r\n    return {id: param.id, title: param.title}\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\n\r\n\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n\r\n\r\n","import {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskType} from \"../../../api/todolists-api\";\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {setAppStatusAC} from '../../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolistId, tasks}\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { todolistId: string, taskId: string }, thunkAPI) => {\r\n    const res = await todolistAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue,\r\n    getState\r\n}) => {\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    try {\r\n        const res = await todolistAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error:any)  {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {ControlPoint} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    console.log(\"Additem is called\")\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\");\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n            setNewTaskTitle(\"\");\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() === \"\") {\r\n            setError(\"Title is required\")\r\n            return;\r\n        }\r\n        addItem(newTaskTitle.trim());\r\n        setNewTaskTitle(\"\");\r\n    }\r\n\r\n\r\n    return <div>\r\n        <TextField\r\n            disabled={disabled}\r\n            label={'Type value'}\r\n            variant={'outlined'}\r\n            value={newTaskTitle}\r\n            onChange={onNewTitleChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            error={!!error}\r\n            helperText={error}\r\n        />\r\n        <IconButton onClick={addTask} color={'primary'}disabled={disabled}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log(\"EditableSpan\")\r\n    let [title, setTitle] = useState(\"\")\r\n    let [editMode, setEditMode] = useState(false)\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        return setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode ? <TextField onBlur={activateViewMode} onChange={onChangeTitleHandler} value={title} autoFocus/> :\r\n        <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistID: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onRemoveHandler = useCallback(() => props.removeTask(props.task.id, props.todolistID), [props.task.id, props.todolistID])\r\n\r\n    const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistID)\r\n    }, [props.task.id, props.todolistID]);\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistID);\r\n    }, [props.task.id, props.todolistID])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            onChange={onChangeStatusHandler}\r\n            checked={props.task.status === TaskStatuses.Completed}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"./todolists-reducer\";\r\nimport {useAppDispatch} from '../../../app/hooks';\r\nimport {fetchTasksTC} from './tasks-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, newTitle)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.todolist.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task\r\n                        todolistID={props.todolist.id}\r\n                        task={t}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        key={t.id}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todolist.filter === 'all' ? \"contained\" : \"text\"} onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={'primary'} variant={props.todolist.filter === 'active' ? \"contained\" : \"text\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={props.todolist.filter === 'completed' ? \"contained\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './Todolist/todolists-reducer';\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './Todolist/tasks-reducer';\r\nimport {TaskStatuses} from '../../api/todolists-api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useAppSelector<Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useAppSelector<TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(removeTaskTC({todolistId, taskId}))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const thunk = addTaskTC({title, todolistId});\r\n        dispatch(thunk);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC({taskId, domainModel: {status}, todolistId}));\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(updateTaskTC({taskId, domainModel: {title: newTitle}, todolistId}));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string,) => {\r\n        dispatch(changeTodolistFilterAC({id: todolistId, filter: value}));\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC({id: todolistId, title: newTitle}));\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}} justifyContent={\"center\"}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3} justifyContent={\"center\"}>\r\n            {\r\n                todolists.map((tl) => {\r\n                    let tasksForTodolist = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist todolist={tl}\r\n                                      removeTodolist={removeTodolist}\r\n                                      key={tl.id}\r\n                                      tasks={tasksForTodolist}\r\n                                      removeTask={removeTask}\r\n                                      changeFilter={changeFilter}\r\n                                      addTask={addTask}\r\n                                      changeTaskStatus={changeStatus}\r\n                                      changeTaskTitle={changeTaskTitle}\r\n                                      changeTodolistTitle={changeTodolistTitle}\r\n                                      demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert'\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n    // const [open, setOpen] = useState(true)\r\n\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n        // setOpen(false)\r\n\r\n    }\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n                {error} 😠\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {loginTC} from './auth-reducer';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            } else if (values.password.length <= 2) {\r\n                return {password: 'Password length should be 2 or more'}\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    createStyles,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Theme,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {useAppDispatch, useAppSelector} from './hooks';\r\nimport {HashRouter, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {initializedAppTC} from './app-reducer';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const classes = useStyles();\r\n    const dispatch = useAppDispatch()\r\n    const status = useAppSelector(state => state.app.status)\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(initializedAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{textAlign: \"center\", marginTop: \"20%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className={classes.menuButton}>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Todolists\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path=\"/login\" element={<Login/>}/>\r\n                        <Route path=\"*\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import {AnyAction, combineReducers} from 'redux';\r\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer';\r\nimport {tasksReducer} from '../features/TodolistsList/Todolist/tasks-reducer';\r\nimport thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport type RootReducerType = typeof rootReducer\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\nexport type AppDispatch = ThunkDispatch<AppRootStateType,\r\n    unknown,\r\n    AnyAction>\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AnyAction>\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}